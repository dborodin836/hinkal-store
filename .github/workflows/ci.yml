name: CI

on:
  push:
    branches: [master, develop, release]
  pull_request:
    branches: [master, develop, release]
  schedule:
    - cron: '0 0 * * 1'

jobs:
  lint-backend:
    name: Black flake8 mypy
    runs-on: ubuntu-latest
    env:
      ENV: docker
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'

      - name: Display Python version
        run: python -c "import sys; print(sys.version)"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt
          pip install -r backend/requirements_dev.txt

      - name: Run black
        run: black --check backend/src/ --line-length 99

      - name: Run flake8
        run: flake8 backend/src --config backend/tox.ini

      - name: Run Mypy
        run: |
          cd backend
          mypy src --config-file setup.cfg --no-incremental

  test-backend:
    name: Testing Database
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres

        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: postgres

        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2

      - name: Install dependencies
        run: |
          cd backend
          pip install -r requirements.txt
          pip install -r requirements_dev.txt

      - name: Migrate database
        run: |
          cd backend
          python manage.py migrate
        env:
          ENV: TEST

      - name: Run tests function
        run: |
          cd backend
          python manage.py test
        env:
          ENV: TEST

      - name: Generate coverage report
        run: |
          cd backend
          coverage run manage.py test
          coverage xml
        env:
          ENV: TEST

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          fail_ci_if_error: true
          flags: backend

  lint-frontend:
    name: Frontend Linting
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js 16
        uses: actions/setup-node@v1
        with:
          node-version: 16

      - name: Install packages
        run: |
          cd frontend
          npm install --force

      - name: Run linting
        run: |
          cd frontend
          npm run lint

      - name: Check with prettier
        run: |
          cd frontend
          npx prettier src -c

  docker-compose-check:
    name: Docker Compose Healthschecks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Build containers
        run: docker-compose -f docker-compose-local.yml up -d
      - name: Test Frontend
        run: |
          sleep 15
          curl --fail http://0.0.0.0 || exit 1
      - name: Test Backend
        run: |
          sleep 45
          curl --fail http://0.0.0.0/api/dish/?format=api || exit 1

  test-frontend:
    name: Testing Frontend
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js 16
        uses: actions/setup-node@v1
        with:
          node-version: 16

      - name: Install packages
        run: |
          cd frontend
          npm install --legacy-peer-deps

      - name: Run tests
        run: |
          cd frontend
          npm run test:gh

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          fail_ci_if_error: true
          flags: frontend
